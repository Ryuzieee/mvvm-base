# TODO: キャッシュ導入

version: 2
jobs:
  # ジョブ名
  # ジョブはステップの集まりです
  # 各ジョブでは、docker、machine、macos のいずれかの Executor を宣言する必要があります
  dummy1:
    # プロジェクトをビルドする際にどの Docker イメージを使うか指定します
    # CircleCI は、イメージを使用して「コンテナ」を立ち上げます
    # ここでは「circleci/ruby:2.4.1」イメージ
    docker:
      - image: circleci/ruby:2.4.1
    steps:
      # プロジェクトのディレクトリにあるコードをチェックアウトします
      - checkout
      # ディレクトリを作成
      - run: mkdir -p workspace
      # 上記で作成したディレクトリ内に「echo-output」を作成し、"Test"と書き込み
      - run: echo "Test" > workspace/echo-output
      # Circle CI 2.0ではjobごとに異なるDockerコンテナが起動するので、
      # 別のjobにファイルを受け渡すにはpersist_to_workspaceを使います
      - persist_to_workspace:
          # 絶対パス、または working_directory からの相対パスにする必要があります
          root: workspace
          # root からの相対パスにする必要があります
          paths:
            - echo-output
  dummy2:
    docker:
      - image: circleci/ruby:2.4.1
    steps:
      - checkout
      # ファイルを参照するjobではattach_workspaceを使います
      # 「workspace」の受け取り
      - attach_workspace:
          at: workspace
      # ダミーアーティファクトの作成
      - run:
          name: ダミーアーティファクトの作成
          command: |
            mkdir /tmp/artifacts;
            echo "Test artifact files in a dir" > /tmp/artifacts/artifact;
      - store_artifacts:
          path: /tmp/artifacts
      # 上記で作成した「echo-output」の内容をcatでチェック
      # "Trying out workspaces"と書き込みがある -> Print "It worked!"
      # "Trying out workspaces"と書き込みがない -> Print "Nope!" & error
      - run: |
          if [[ $(cat workspace/echo-output) == "Trying out workspaces" ]]; then
            echo "It worked!";
          else
            echo "Nope!"; exit 1
          fi
  test:
    filters:
      branches:
        only:
          - master
          - develop
    docker:
      - image: circleci/android:api-26-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Accept licenses
          command: yes | sdkmanager --licenses || true
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Run Lint Test
          command: ./gradlew lint
      - run:
          name: Build Code
          command: ./gradlew assembleDebug
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - store_artifacts:
          path: app/build/outputs
          destination: app
workflows:
  version: 2
  dummy_and_test:
    jobs:
      - dummy1
      - dummy2:
          # job実行の前提条件
          requires:
            - dummy1
      - test:
          requires:
            - dummy1
            - dummy2